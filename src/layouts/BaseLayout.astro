---
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.jsx";
import Footer from "../components/Footer.jsx";
import ClientRouter from "../components/ClientRouter.astro";

const { title, description, permalink, current } = Astro.props;
---

<html lang="es">
  <head>
    <BaseHead {title} {description} {permalink} />
    <script is:inline>
      /**
       * Script de inicialización del tema para prevenir FOUC (Flash of Unstyled Content).
       * Este script se ejecuta antes de que cargue React para aplicar el tema inmediatamente.
       */
      (function() {
        try {
          // Leer tema de localStorage
          const savedTheme = localStorage.getItem('theme');
          
          // Determinar tema usando el valor guardado o la preferencia del sistema
          const theme = savedTheme === 'dark' || savedTheme === 'light'
            ? savedTheme
            : (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
          
          // Aplicar tema al HTML
          document.documentElement.classList.remove('theme-dark', 'theme-light');
          document.documentElement.classList.add(`theme-${theme}`);
          document.documentElement.setAttribute('data-theme', theme);
          
          // Guardar el tema determinado para coherencia
          if (theme !== savedTheme) {
            localStorage.setItem('theme', theme);
          }
          
          console.log('[BaseLayout] Tema inicial aplicado:', theme);
        } catch (e) {
          console.error('[BaseLayout] Error al aplicar tema inicial:', e);
        }
      })();
    </script>
  </head>

  <body>
    <Header current={current} />
    <main>
      <slot />
    </main>
    <Footer />
    <ClientRouter />
  </body>
</html>

<style>
  main {
    padding: 2rem 0;
    min-height: calc(100vh - 200px);
  }
  
  @media (max-width: 480px) {
    main {
      padding: 1rem 0;
      min-height: calc(100vh - 180px);
    }
  }
</style>

<script>
  document.addEventListener('astro:page-load', () => {
    console.log('[BaseLayout] Página cargada');
    
    // Verificar que el tema esté correctamente aplicado
    try {
      const theme = localStorage.getItem('theme') || 'light';
      const htmlHasThemeClass = document.documentElement.classList.contains(`theme-${theme}`);
      
      if (!htmlHasThemeClass) {
        console.log('[BaseLayout] Reaplying theme:', theme);
        document.documentElement.classList.remove('theme-dark', 'theme-light');
        document.documentElement.classList.add(`theme-${theme}`);
        document.documentElement.setAttribute('data-theme', theme);
      }
    } catch (e) {
      console.error('[BaseLayout] Error verificando tema:', e);
    }
    
    // Configurar header para transiciones
    const headerElement = document.querySelector('header');
    if (headerElement) {
      headerElement.style.viewTransitionName = 'header';
    }
  });
</script>

<style is:global>
  /* Configuración global para View Transitions */
  ::view-transition-old(root) {
    animation: 0.3s cubic-bezier(0.4, 0, 0.2, 1) both fade-out;
  }
  
  ::view-transition-new(root) {
    animation: 0.3s cubic-bezier(0.4, 0, 0.2, 1) both fade-in;
  }
  
  @keyframes fade-in {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  @keyframes fade-out {
    from { opacity: 1; transform: translateY(0); }
    to { opacity: 0; transform: translateY(-20px); }
  }
</style>
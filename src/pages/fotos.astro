---
import BaseLayout from '../layouts/BaseLayout.astro';
import { photos, categories } from '../data/photos';
import { ViewTransitions } from 'astro:transitions';
import OptimizedImage from '../components/OptimizedImage.jsx';
---

<BaseLayout title="Fotos" current="fotos">
  <div class="container">
    <h1 transition:animate="slide">Fotos</h1>

    <div class="filter-container" transition:animate="fade">
      <button class="filter-btn active" data-category="all">Todas</button>
      {categories.map((category) => (
        <button class="filter-btn" data-category={category}>{category}</button>
      ))}
    </div>

    <div class="gallery-grid" transition:animate="fade">
      {photos.map((photo) => (
        <a 
          href={`/fotos/${photo.id}`} 
          class="gallery-item" 
          data-category={photo.category}
          data-astro-prefetch
          transition:name={`gallery-item-${photo.id}`}
        >
          <OptimizedImage
            src={photo.url} 
            alt={photo.title} 
            className="gallery-image"
            loadingMode="lazy"
            transitionName={`photo-${photo.id}`}
            client:visible
          />
          <div class="gallery-overlay">
            <h3 transition:name={`photo-title-${photo.id}`}>{photo.title}</h3>
            <p>{photo.description}</p>
            {photo.location && (
              <span class="location" transition:name={`photo-location-${photo.id}`}>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                  <circle cx="12" cy="10" r="3"></circle>
                </svg>
                {photo.location}
              </span>
            )}
          </div>
        </a>
      ))}
    </div>
  </div>
</BaseLayout>

<script>
  // Cache de elementos DOM para mejor rendimiento
  let filterButtons;
  let galleryItems;
  
  // Debounce para mejorar rendimiento de eventos frecuentes
  function debounce(func, wait = 20) {
    let timeout;
    return function(...args) {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), wait);
    };
  }

  // Esta función maneja toda la inicialización de la galería de manera optimizada
  function initializePhotoGallery() {
    console.log('Inicializando galería de fotos');
    
    // Cache de elementos DOM para mejor rendimiento
    filterButtons = document.querySelectorAll('.filter-btn');
    galleryItems = document.querySelectorAll('.gallery-item');
    
    // Usar delegación de eventos para mejor rendimiento
    const filterContainer = document.querySelector('.filter-container');
    if (filterContainer) {
      // Limpiar listeners previos
      const newContainer = filterContainer.cloneNode(true);
      filterContainer.parentNode.replaceChild(newContainer, filterContainer);
      
      // Un solo event listener con delegación para todos los botones
      newContainer.addEventListener('click', (e) => {
        const button = e.target.closest('.filter-btn');
        if (!button) return;
        
        // Actualizar estado activo
        document.querySelectorAll('.filter-btn').forEach(btn => {
          btn.classList.remove('active');
        });
        button.classList.add('active');
        
        // Filtrar por categoría
        const category = button.getAttribute('data-category');
        filterGalleryItems(category);
      });
    }
    
    // Usar IntersectionObserver para cargar solo lo visible
    setupLazyLoad();
    
    // Configurar los enlaces para trabajar con View Transitions
    setupGalleryLinks();
  }
  
  // Usar IntersectionObserver para animación de entrada al viewport
  function setupLazyLoad() {
    if ('IntersectionObserver' in window) {
      const options = {
        root: null,
        rootMargin: '0px',
        threshold: 0.1
      };
      
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            const item = entry.target;
            // Añadir clase visible con un pequeño retraso escalonado
            setTimeout(() => {
              item.classList.add('visible');
            }, Math.random() * 100);
            observer.unobserve(item);
          }
        });
      }, options);
      
      // Observar cada elemento de la galería
      document.querySelectorAll('.gallery-item').forEach(item => {
        observer.observe(item);
      });
    } else {
      // Fallback para navegadores sin IntersectionObserver
      document.querySelectorAll('.gallery-item').forEach((item, index) => {
        setTimeout(() => {
          item.classList.add('visible');
        }, 30 * index);
      });
    }
  }
  
  // Filtrado optimizado de elementos de la galería
  function filterGalleryItems(category) {
    // Batch DOM operations for better performance
    requestAnimationFrame(() => {
      const items = document.querySelectorAll('.gallery-item');
      const fragment = document.createDocumentFragment();
      const container = document.querySelector('.gallery-grid');
      const itemsToShow = [];
      const itemsToHide = [];
      
      items.forEach(item => {
        const itemCategory = item.getAttribute('data-category');
        if (category === 'all' || itemCategory === category) {
          itemsToShow.push(item);
        } else {
          itemsToHide.push(item);
        }
      });
      
      // Primero ocultar elementos no coincidentes
      itemsToHide.forEach(item => {
        item.classList.remove('visible');
        // Usar opacity para mejor rendimiento que display:none
        item.style.opacity = '0';
        item.style.pointerEvents = 'none';
        item.style.position = 'absolute';
        item.style.transform = 'scale(0.8)';
      });
      
      // Luego mostrar elementos coincidentes con animación escalonada
      itemsToShow.forEach((item, i) => {
        // Restaurar visibilidad
        item.style.opacity = '';
        item.style.pointerEvents = '';
        item.style.position = '';
        item.style.transform = '';
        
        // Animar con retraso escalonado
        setTimeout(() => {
          item.classList.add('visible');
        }, i * 30); // Tiempo más corto para mejor rendimiento
      });
    });
  }
  
  // Configurar los enlaces para trabajar con View Transitions
  function setupGalleryLinks() {
    // Usar delegación de eventos para mejor rendimiento
    const galleryGrid = document.querySelector('.gallery-grid');
    if (galleryGrid) {
      galleryGrid.addEventListener('click', (e) => {
        const item = e.target.closest('.gallery-item');
        if (!item) return;
        
        // Marcar como seleccionado para transición
        document.querySelectorAll('.gallery-item').forEach(el => {
          el.removeAttribute('data-selected');
        });
        item.setAttribute('data-selected', 'true');
        
        // Guardar el ID en sessionStorage para recuperarlo al volver
        const href = item.getAttribute('href');
        const id = href.split('/').pop();
        try {
          sessionStorage.setItem('last-viewed-photo', id);
        } catch (e) {
          console.error('Error al guardar en sessionStorage:', e);
        }
      });
    }
  }
  
  // Inicialización eficiente usando requestIdleCallback si está disponible
  function safeInitialize() {
    if ('requestIdleCallback' in window) {
      requestIdleCallback(() => initializePhotoGallery(), { timeout: 1000 });
    } else {
      setTimeout(initializePhotoGallery, 10);
    }
  }
  
  // Eventos de carga optimizados
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', safeInitialize);
  } else {
    safeInitialize();
  }
  
  // Reinicializar cuando se navegue con View Transitions API
  document.addEventListener('astro:page-load', safeInitialize);
  
  // Detectar cuando volvemos de una página de detalle - optimizado
  document.addEventListener('astro:after-swap', () => {
    // Comprobar si estamos en la página de la galería
    if (window.location.pathname === '/fotos/' || window.location.pathname === '/fotos') {
      try {
        // Recuperar ID guardado en sessionStorage (más eficiente que document.referrer)
        const lastViewedId = sessionStorage.getItem('last-viewed-photo');
        if (lastViewedId) {
          const selector = `.gallery-item[href="/fotos/${lastViewedId}"]`;
          
          // Usar requestAnimationFrame para operaciones visuales
          requestAnimationFrame(() => {
            const item = document.querySelector(selector);
            if (item) {
              // Hacer scroll suave al elemento
              setTimeout(() => {
                item.scrollIntoView({ 
                  behavior: 'smooth', 
                  block: 'center',
                  inline: 'center'
                });
                
                // Destacar brevemente
                item.classList.add('highlight');
                setTimeout(() => {
                  item.classList.remove('highlight');
                }, 1500);
              }, 200);
            }
          });
        }
      } catch (e) {
        console.error('Error al recuperar foto vista previamente:', e);
      }
    }
  });
</script>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  h1 {
    text-align: center;
    margin-bottom: 2rem;
    color: var(--text-main, #333);
  }

  .filter-container {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    margin-bottom: 2rem;
    gap: 0.5rem;
  }

  .filter-btn {
    background: none;
    border: 1px solid var(--border-color, #ddd);
    padding: 0.5rem 1rem;
    border-radius: 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.9rem;
    color: var(--text-main, #333);
  }

  .filter-btn:hover {
    background-color: rgba(230, 126, 34, 0.1);
  }

  .filter-btn.active {
    background-color: var(--primary-color, #e67e22);
    color: white;
    border-color: var(--primary-color, #e67e22);
  }

  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 3rem;
  }

  .gallery-item {
    position: relative;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    aspect-ratio: 3/2;
    transition: transform 0.5s ease, opacity 0.5s ease, box-shadow 0.5s ease;
    opacity: 0;
    transform: translateY(20px);
    display: block;
    text-decoration: none;
    color: inherit;
    background: #000;
  }
  
  .gallery-item.visible {
    opacity: 1;
    transform: translateY(0);
  }

  .gallery-item:hover {
    transform: translateY(-5px) scale(1.02);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    z-index: 2;
  }

  .gallery-image {
    transition: all 0.5s ease;
  }

  .gallery-item:hover .gallery-image {
    transform: scale(1.05);
  }
  
  /* Estilos para contenedor de OptimizedImage */
  .optimized-image-container {
    border-radius: inherit;
    transform-origin: center;
    transition: transform 0.5s ease;
  }

  .gallery-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0));
    color: white;
    padding: 1.5rem 1rem 1rem;
    transform: translateY(100%);
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    flex-direction: column;
    will-change: transform;
  }

  .gallery-item:hover .gallery-overlay {
    transform: translateY(0);
  }

  .gallery-overlay h3 {
    margin: 0 0 0.5rem;
    font-size: 1.2rem;
    font-weight: 600;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.5);
  }

  .gallery-overlay p {
    margin: 0 0 0.75rem;
    font-size: 0.9rem;
    opacity: 0.9;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    line-height: 1.4;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
  }

  .location {
    font-size: 0.85rem;
    opacity: 0.85;
    display: flex;
    align-items: center;
    gap: 0.3rem;
    margin-top: auto;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
  }

  /* View Transitions animations */
  ::view-transition-old(root) {
    animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both fade-out;
  }
  
  ::view-transition-new(root) {
    animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both fade-in;
  }
  
  /* Specific animations for photos */
  ::view-transition-old(photo-*) {
    animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both fade-out;
  }
  
  ::view-transition-new(photo-*) {
    animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both fade-in;
  }
  
  @keyframes fade-in {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  @keyframes fade-out {
    from { opacity: 1; }
    to { opacity: 0; }
  }

  /* Responsive */
  @media (max-width: 900px) {
    .gallery-grid {
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    }
  }

  @media (max-width: 600px) {
    .gallery-grid {
      grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
      gap: 1rem;
    }
    
    .gallery-overlay h3 {
      font-size: 1rem;
    }
    
    .gallery-overlay p {
      font-size: 0.8rem;
      -webkit-line-clamp: 2;
    }
    
    .filter-btn {
      padding: 0.4rem 0.8rem;
      font-size: 0.8rem;
    }
  }
</style>

<style is:global>
  /* View transition overrides */
  html::view-transition-group(*) {
    animation-duration: 0.5s;
  }
  
  html::view-transition-old(*) {
    animation: 0.5s cubic-bezier(0.4, 0, 0.2, 1) both fade-out;
  }
  
  html::view-transition-new(*) {
    animation: 0.5s cubic-bezier(0.4, 0, 0.2, 1) both fade-in;
  }
  
  @keyframes fade-in {
    from { opacity: 0; transform: scale(0.95); }
    to { opacity: 1; transform: scale(1); }
  }
  
  @keyframes fade-out {
    from { opacity: 1; transform: scale(1); }
    to { opacity: 0; transform: scale(1.05); }
  }
  
  /* Efecto de resaltado para cuando volvemos a la galería */
  .gallery-item.highlight {
    animation: highlight-pulse 1.5s ease-in-out;
    z-index: 5;
  }
  
  @keyframes highlight-pulse {
    0% { box-shadow: 0 0 0 0 rgba(230, 126, 34, 0.8); transform: scale(1); }
    20% { box-shadow: 0 0 0 10px rgba(230, 126, 34, 0.0); transform: scale(1.05); }
    40% { box-shadow: 0 0 0 0 rgba(230, 126, 34, 0.0); transform: scale(1); }
    60% { box-shadow: 0 0 0 5px rgba(230, 126, 34, 0.5); transform: scale(1.02); }
    100% { box-shadow: 0 0 0 0 rgba(230, 126, 34, 0.0); transform: scale(1); }
  }
  
  /* Estilo para elemento seleccionado */
  .gallery-item[data-selected="true"] img {
    outline: 3px solid var(--primary-color, #e67e22);
    outline-offset: -3px;
  }
</style> 
---
import BaseLayout from '../layouts/BaseLayout.astro';
import { photos, categories } from '../data/photos';
import { ViewTransitions } from 'astro:transitions';
---

<BaseLayout title="Fotos" current="fotos">
  <div class="container">
    <h1 transition:animate="slide">Fotos</h1>

    <div class="filter-container" transition:animate="fade">
      <button class="filter-btn active" data-category="all">Todas</button>
      {categories.map((category) => (
        <button class="filter-btn" data-category={category}>{category}</button>
      ))}
    </div>

    <div class="gallery-grid" transition:animate="fade">
      {photos.map((photo) => (
        <a 
          href={`/fotos/${photo.id}`} 
          class="gallery-item" 
          data-category={photo.category}
          data-astro-prefetch
          transition:name={`gallery-item-${photo.id}`}
        >
          <div class="image-container" transition:name={`photo-container-${photo.id}`}>
          <img 
            src={photo.url} 
            alt={photo.title} 
            loading="lazy"
            class="gallery-image"
              transition:name={`photo-${photo.id}`}
              width="300"
              height="200"
          />
          </div>
          <div class="gallery-overlay">
            <h3 transition:name={`photo-title-${photo.id}`}>{photo.title}</h3>
            <p>{photo.description}</p>
            {photo.location && (
              <span class="location" transition:name={`photo-location-${photo.id}`}>
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                  <circle cx="12" cy="10" r="3"></circle>
                </svg>
                {photo.location}
              </span>
            )}
          </div>
        </a>
      ))}
    </div>
  </div>
</BaseLayout>

<script>
  // Cache de elementos DOM para mejor rendimiento
  let filterButtons;
  let galleryItems;
  
  // Debounce para mejorar rendimiento de eventos frecuentes
  function debounce(func, wait = 20) {
    let timeout;
    return function(...args) {
      clearTimeout(timeout);
      timeout = setTimeout(() => func.apply(this, args), wait);
    };
  }

  // Esta función maneja toda la inicialización de la galería de manera optimizada
  function initializePhotoGallery() {
    console.log('Inicializando galería de fotos');
    
    // Cache de elementos DOM para mejor rendimiento
    filterButtons = document.querySelectorAll('.filter-btn');
    galleryItems = document.querySelectorAll('.gallery-item');
    
    // Usar delegación de eventos para mejor rendimiento
    const filterContainer = document.querySelector('.filter-container');
    if (filterContainer) {
      // Limpiar listeners previos
      const newContainer = filterContainer.cloneNode(true);
      filterContainer.parentNode.replaceChild(newContainer, filterContainer);
      
      // Un solo event listener con delegación para todos los botones
      newContainer.addEventListener('click', (e) => {
        const button = e.target.closest('.filter-btn');
        if (!button) return;
        
        // Actualizar estado activo
        document.querySelectorAll('.filter-btn').forEach(btn => {
          btn.classList.remove('active');
        });
        button.classList.add('active');
        
        // Filtrar por categoría
        const category = button.getAttribute('data-category');
        filterGalleryItems(category);
      });
    }
    
    // Usar IntersectionObserver para cargar solo lo visible
    setupLazyLoad();
    
    // Configurar los enlaces para trabajar con View Transitions
    setupGalleryLinks();

    // Forzar que todas las imágenes sean visibles inmediatamente en móviles
    if (window.innerWidth <= 600) {
    document.querySelectorAll('.gallery-item').forEach(item => {
        item.classList.add('visible');
      });
    }
  }
  
  // Usar IntersectionObserver para animación de entrada al viewport
  function setupLazyLoad() {
    if ('IntersectionObserver' in window) {
      const galleryItems = document.querySelectorAll('.gallery-item');
      const appearOptions = {
        threshold: 0.1,
        rootMargin: '0px 0px 50px 0px'
      };
      
      const appearOnScroll = new IntersectionObserver((entries, observer) => {
        entries.forEach((entry, index) => {
          if (entry.isIntersecting) {
            // Añadir retardo escalonado para efecto de cascada
            setTimeout(() => {
              entry.target.classList.add('visible');
            }, index * 50);
            
            observer.unobserve(entry.target);
          }
        });
      }, appearOptions);
      
      galleryItems.forEach(item => {
        appearOnScroll.observe(item);
      });
      } else {
      // Fallback para navegadores sin IntersectionObserver
      document.querySelectorAll('.gallery-item').forEach(item => {
        item.classList.add('visible');
      });
    }
  }
  
  // Filtrar elementos de la galería por categoría
  function filterGalleryItems(category) {
    if (!galleryItems) return;
    
    // Usar animationFrame para mejor rendimiento
    requestAnimationFrame(() => {
      galleryItems.forEach(item => {
        if (category === 'all' || item.dataset.category === category) {
          item.style.display = '';
          
          // Animar entrada con retardo
        setTimeout(() => {
            item.classList.add('visible');
          }, 10);
        } else {
          // Animar salida y luego ocultar
          item.classList.remove('visible');
          
          // Ocultar después de la transición
              setTimeout(() => {
            item.style.display = 'none';
          }, 300); // Debe coincidir con la duración de la transición CSS
        }
      });
    });
  }
  
  // Configurar enlaces para View Transitions
  function setupGalleryLinks() {
    document.querySelectorAll('.gallery-item').forEach(item => {
      item.addEventListener('click', (e) => {
        // Añadir datos para recuperar posición al volver
        try {
          sessionStorage.setItem('lastViewedPhoto', item.getAttribute('href').split('/').pop());
          sessionStorage.setItem('scrollPosition', window.scrollY);
        } catch (err) {
          console.error('Error guardando estado:', err);
        }
      });
    });
  }
  
  // Restaurar posición de desplazamiento cuando se vuelve a la galería
  function restoreScrollPosition() {
    try {
      const scrollY = sessionStorage.getItem('scrollPosition');
      const lastPhoto = sessionStorage.getItem('lastViewedPhoto');
      
      if (scrollY && lastPhoto) {
        window.scrollTo(0, parseInt(scrollY, 10));
        
        // Opcional: resaltar la última foto vista
        const lastPhotoElement = document.querySelector(`a[href="/fotos/${lastPhoto}"]`);
        if (lastPhotoElement) {
          lastPhotoElement.classList.add('highlight');
          setTimeout(() => {
            lastPhotoElement.classList.remove('highlight');
          }, 2000);
        }
      }
    } catch (err) {
      console.error('Error restaurando posición:', err);
    }
  }
  
  // Eventos Astro
  document.addEventListener('astro:page-load', () => {
    console.log('Página de galería cargada');
                  initializePhotoGallery();
    
    // Si venimos de una página de detalle, restaurar posición
    if (document.referrer.includes('/fotos/')) {
      restoreScrollPosition();
    }
  });
</script>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  h1 {
    text-align: center;
    margin-bottom: 2rem;
  }

  .filter-container {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    justify-content: center;
    margin-bottom: 2rem;
  }

  .filter-btn {
    padding: 0.5rem 1rem;
    border-radius: 30px;
    border: 1px solid rgba(230, 126, 34, 0.3);
    background-color: rgba(255, 255, 255, 0.1);
    cursor: pointer;
    transition: all 0.3s ease;
    font-size: 0.9rem;
    color: var(--text-main, #333);
  }

  .filter-btn:hover {
    background-color: rgba(230, 126, 34, 0.1);
  }

  .filter-btn.active {
    background-color: var(--primary-color, #e67e22);
    color: white;
    border-color: var(--primary-color, #e67e22);
  }

  .gallery-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
    gap: 1.5rem;
    margin-bottom: 3rem;
  }

  .gallery-item {
    position: relative;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
    cursor: pointer;
    height: 220px;
    transition: transform 0.5s ease, opacity 0.5s ease, box-shadow 0.5s ease;
    opacity: 0;
    transform: translateY(20px);
    display: block;
    text-decoration: none;
    color: inherit;
    background: #000;
  }
  
  .gallery-item.visible {
    opacity: 1;
    transform: translateY(0);
  }

  .gallery-item:hover {
    transform: translateY(-5px) scale(1.02);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
    z-index: 2;
  }

  .image-container {
    width: 100%;
    height: 100%;
    overflow: hidden;
    border-radius: inherit;
    position: relative;
    transform-origin: center;
    will-change: transform;
    background-color: #f2f2f2;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .gallery-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
    transform-origin: center;
    display: block;
  }

  .gallery-item:hover .gallery-image {
    transform: scale(1.05);
  }

  .gallery-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    background: linear-gradient(to top, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0));
    color: white;
    padding: 1.5rem 1rem 1rem;
    transform: translateY(65%);
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    flex-direction: column;
    z-index: 2;
  }

  .gallery-item:hover .gallery-overlay {
    transform: translateY(0);
  }

  .gallery-overlay h3 {
    margin: 0 0 0.5rem;
    font-size: 1.2rem;
    font-weight: 600;
    text-shadow: 0 1px 3px rgba(0, 0, 0, 0.5);
  }

  .gallery-overlay p {
    margin: 0 0 0.75rem;
    font-size: 0.9rem;
    opacity: 0.9;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
    line-height: 1.4;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
  }

  .location {
    font-size: 0.85rem;
    opacity: 0.85;
    display: flex;
    align-items: center;
    gap: 0.3rem;
    margin-top: auto;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
  }

  .gallery-item.highlight {
    box-shadow: 0 0 0 3px var(--primary-color), 0 10px 25px rgba(0, 0, 0, 0.2);
    z-index: 3;
  }

  /* Responsive */
  @media (max-width: 900px) {
    .gallery-grid {
      grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
    }
    
    .container {
      padding: 1.5rem;
    }
  }

  @media (max-width: 600px) {
    .gallery-grid {
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
      gap: 0.75rem;
    }
    
    .gallery-item {
      height: 160px;
      opacity: 1;
      transform: none;
    }
    
    .gallery-overlay {
      padding: 1rem 0.75rem 0.75rem;
      transform: translateY(60%);
    }
    
    .gallery-overlay h3 {
    font-size: 0.9rem;
      margin-bottom: 0.25rem;
    }
    
    .gallery-overlay p {
      font-size: 0.75rem;
      -webkit-line-clamp: 2;
      margin-bottom: 0.5rem;
    }
    
    .filter-btn {
      padding: 0.4rem 0.8rem;
    font-size: 0.75rem;
    }
    
    .container {
    padding: 1rem;
    }
  }

  @media (max-width: 480px) {
    .gallery-grid {
      grid-template-columns: repeat(auto-fill, minmax(130px, 1fr));
      gap: 0.5rem;
    }
    
    .gallery-item {
      height: 130px;
    }
    
    .filter-container {
      gap: 0.3rem;
      margin-bottom: 1.5rem;
    }
    
    .filter-btn {
      padding: 0.3rem 0.6rem;
      font-size: 0.7rem;
    }
    
    .container {
      padding: 0.75rem;
    }
  }

  /* Animaciones View Transitions */
  ::view-transition-group(gallery-item-*) {
    animation-duration: 0.5s;
  }
  
  ::view-transition-old(gallery-item-*) {
    animation: 0.3s cubic-bezier(0.4, 0, 0.2, 1) both fade-out;
  }
  
  ::view-transition-new(gallery-item-*) {
    animation: 0.3s cubic-bezier(0.4, 0, 0.2, 1) both fade-in;
  }
  
  ::view-transition-group(photo-*) {
    animation-duration: 0.5s;
  }
  
  ::view-transition-old(photo-*) {
    animation: 0.3s cubic-bezier(0.4, 0, 0.2, 1) both fade-out;
  }
  
  ::view-transition-new(photo-*) {
    animation: 0.3s cubic-bezier(0.4, 0, 0.2, 1) both fade-in;
  }
  
  @keyframes fade-in {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  @keyframes fade-out {
    from { opacity: 1; }
    to { opacity: 0; }
  }
</style> 
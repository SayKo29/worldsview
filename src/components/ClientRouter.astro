---
---

<script>
  // Esta clase maneja el enrutamiento del lado del cliente para las View Transitions
  class ClientRouter {
    constructor() {
      this.setupEventListeners();
      console.log('Cliente router para View Transitions inicializado');
    }

    setupEventListeners() {
      // Interceptar clics en enlaces
      document.addEventListener('click', (event) => this.handleLinkClick(event));
      
      // Eventos de transición de View Transitions API
      document.addEventListener('astro:page-load', () => {
        console.log('Página cargada completamente');
      });
      
      document.addEventListener('astro:before-preparation', () => {
        console.log('Preparando transición');
      });
      
      document.addEventListener('astro:after-preparation', () => {
        console.log('Transición preparada');
      });
      
      document.addEventListener('astro:before-swap', () => {
        console.log('A punto de intercambiar contenido');
      });
      
      document.addEventListener('astro:after-swap', () => {
        console.log('Contenido intercambiado');
        // Resaltar los elementos que han cambiado brevemente
        document.querySelectorAll('[data-astro-transition-persist=""]').forEach(el => {
          el.classList.add('persisted');
          setTimeout(() => {
            el.classList.remove('persisted');
          }, 500);
        });
      });
      
      document.addEventListener('astro:page-transition', () => {
        console.log('Transición de página en curso');
      });
    }

    handleLinkClick(event) {
      // Solo procesar clics en enlaces internos
      const link = event.target.closest('a');
      if (!link || !this.isInternalLink(link)) return;
      
      // En enlaces internos, añadir información de transición
      const targetUrl = new URL(link.href);
      const currentUrl = new URL(window.location.href);
      
      // Si estamos navegando entre fotos, usar transición específica para fotos
      if (targetUrl.pathname.startsWith('/fotos/') && currentUrl.pathname.startsWith('/fotos/')) {
        console.log('Transición entre fotos detectada');
        
        // Identificar si vamos adelante o atrás en la galería
        const currentId = this.extractPhotoId(currentUrl.pathname);
        const targetId = this.extractPhotoId(targetUrl.pathname);
        
        if (currentId && targetId) {
          const direction = parseInt(targetId) > parseInt(currentId) ? 'next' : 'prev';
          document.documentElement.setAttribute('data-transition-direction', direction);
        }
      }
    }
    
    extractPhotoId(pathname) {
      // Extraer ID de la foto de la URL
      const match = pathname.match(/\/fotos\/(\d+)/);
      return match ? match[1] : null;
    }

    isInternalLink(link) {
      // Comprobar si el enlace es interno (mismo dominio)
      try {
        const url = new URL(link.href);
        return url.origin === window.location.origin;
      } catch (e) {
        return false;
      }
    }
  }

  // Inicializar el router cuando el DOM esté listo
  document.addEventListener('astro:page-load', () => {
    new ClientRouter();
  }, { once: true });
</script>

<style is:global>
  /* Estilos para elementos persistentes */
  [data-astro-transition-persist].persisted {
    animation: highlight 0.5s ease-out;
  }
  
  @keyframes highlight {
    0% { box-shadow: 0 0 0 2px rgba(230, 126, 34, 0.5); }
    100% { box-shadow: 0 0 0 0 rgba(230, 126, 34, 0); }
  }
  
  /* Animaciones basadas en la dirección */
  html[data-transition-direction="next"] ::view-transition-old(root) {
    animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-out-left;
  }
  
  html[data-transition-direction="next"] ::view-transition-new(root) {
    animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-in-right;
  }
  
  html[data-transition-direction="prev"] ::view-transition-old(root) {
    animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-out-right;
  }
  
  html[data-transition-direction="prev"] ::view-transition-new(root) {
    animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-in-left;
  }
  
  @keyframes slide-in-right {
    from { transform: translateX(100%); }
    to { transform: translateX(0); }
  }
  
  @keyframes slide-out-left {
    from { transform: translateX(0); }
    to { transform: translateX(-100%); }
  }
  
  @keyframes slide-in-left {
    from { transform: translateX(-100%); }
    to { transform: translateX(0); }
  }
  
  @keyframes slide-out-right {
    from { transform: translateX(0); }
    to { transform: translateX(100%); }
  }
</style>
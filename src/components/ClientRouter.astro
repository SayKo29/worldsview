---
---

<script>
  /**
   * Router del lado del cliente para gestionar las View Transitions
   * con manejo óptimo de eventos asíncronos
   */
  class ClientRouter {
    constructor() {
      // Referencias para limpiar los event listeners
      this.eventHandlers = {};
      
      this.setupEventListeners();
      console.log('Cliente router para View Transitions inicializado');
    }

    setupEventListeners() {
      // Guardar referencias a los manejadores de eventos para poder limpiarlos
      this.eventHandlers.clickHandler = this.handleLinkClick.bind(this);
      
      // Usar opciones de eventos pasivas donde sea posible para mejorar rendimiento
      document.addEventListener('click', this.eventHandlers.clickHandler, { passive: false });
      
      // No retornar promesas en event listeners
      document.addEventListener('astro:page-load', () => {
        console.log('Página cargada completamente');
      });
      
      document.addEventListener('astro:before-preparation', () => {
        console.log('Preparando transición');
      });
      
      document.addEventListener('astro:after-preparation', () => {
        console.log('Transición preparada');
      });
      
      document.addEventListener('astro:before-swap', () => {
        console.log('A punto de intercambiar contenido');
      });
      
      document.addEventListener('astro:after-swap', () => {
        console.log('Contenido intercambiado');
        this.highlightPersistedElements();
      });
    }
    
    // Método separado para marcar elementos persistentes
    highlightPersistedElements() {
      const persistedElements = document.querySelectorAll('[data-astro-transition-persist=""]');
      
      persistedElements.forEach(el => {
        el.classList.add('persisted');
        // Usar requestAnimationFrame para optimizar
        requestAnimationFrame(() => {
          setTimeout(() => {
            el.classList.remove('persisted');
          }, 500);
        });
      });
    }

    handleLinkClick(event) {
      // Verificar si el evento y el target son válidos
      if (!event || !event.target) return;
      
      // Solo procesar clics en enlaces internos
      const link = event.target.closest('a');
      if (!link || !this.isInternalLink(link)) return;
      
      // Procesamiento de la dirección de transición
      try {
        const targetUrl = new URL(link.href);
        const currentUrl = new URL(window.location.href);
        
        // Manejar transiciones entre fotos
        if (targetUrl.pathname.startsWith('/fotos/') && currentUrl.pathname.startsWith('/fotos/')) {
          const currentId = this.extractPhotoId(currentUrl.pathname);
          const targetId = this.extractPhotoId(targetUrl.pathname);
          
          if (currentId && targetId) {
            const direction = parseInt(targetId) > parseInt(currentId) ? 'next' : 'prev';
            document.documentElement.setAttribute('data-transition-direction', direction);
          }
        } 
        // Transición de galería a detalle
        else if (targetUrl.pathname.startsWith('/fotos/') && currentUrl.pathname === '/fotos') {
          document.documentElement.setAttribute('data-transition-direction', 'zoom-in');
        } 
        // Transición de detalle a galería
        else if (targetUrl.pathname === '/fotos' && currentUrl.pathname.startsWith('/fotos/')) {
          document.documentElement.setAttribute('data-transition-direction', 'zoom-out');
        }
      } catch (e) {
        console.error('Error procesando enlace:', e);
      }
    }
    
    extractPhotoId(pathname) {
      const match = pathname.match(/\/fotos\/(\d+)/);
      return match ? match[1] : null;
    }

    isInternalLink(link) {
      try {
        // Evitar generar URLs inválidas
        if (!link || typeof link.href !== 'string') return false;
        
        const url = new URL(link.href);
        return url.origin === window.location.origin;
      } catch (e) {
        return false;
      }
    }
    
    // Método para limpiar eventos cuando sea necesario
    cleanup() {
      document.removeEventListener('click', this.eventHandlers.clickHandler);
      // Limpiar otros listeners si es necesario
    }
  }

  // Inicializar el router cuando el DOM esté listo, evitando múltiples instancias
  let router;
  document.addEventListener('astro:page-load', () => {
    // Limpiar instancia previa si existe
    if (router) {
      router.cleanup();
    }
    // Crear nueva instancia
    router = new ClientRouter();
  }, { once: false });
</script>

<style is:global>
  /* Estilos para elementos persistentes */
  [data-astro-transition-persist].persisted {
    animation: highlight 0.5s ease-out;
  }
  
  @keyframes highlight {
    0% { box-shadow: 0 0 0 2px rgba(230, 126, 34, 0.5); }
    100% { box-shadow: 0 0 0 0 rgba(230, 126, 34, 0); }
  }
  
  /* Animaciones basadas en la dirección */
  html[data-transition-direction="next"] ::view-transition-old(root) {
    animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-out-left;
  }
  
  html[data-transition-direction="next"] ::view-transition-new(root) {
    animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-in-right;
  }
  
  html[data-transition-direction="prev"] ::view-transition-old(root) {
    animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-out-right;
  }
  
  html[data-transition-direction="prev"] ::view-transition-new(root) {
    animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-in-left;
  }
  
  /* Transiciones para zoom */
  html[data-transition-direction="zoom-in"] ::view-transition-old(root) {
    animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both fade-out;
  }
  
  html[data-transition-direction="zoom-in"] ::view-transition-new(root) {
    animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both zoom-in;
  }
  
  html[data-transition-direction="zoom-out"] ::view-transition-old(root) {
    animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both fade-out;
  }
  
  html[data-transition-direction="zoom-out"] ::view-transition-new(root) {
    animation: 300ms cubic-bezier(0.4, 0, 0.2, 1) both zoom-out;
  }
  
  /* Animaciones base */
  @keyframes slide-in-right {
    from { transform: translateX(100%); opacity: 0.7; }
    to { transform: translateX(0); opacity: 1; }
  }
  
  @keyframes slide-out-left {
    from { transform: translateX(0); opacity: 1; }
    to { transform: translateX(-100%); opacity: 0.7; }
  }
  
  @keyframes slide-in-left {
    from { transform: translateX(-100%); opacity: 0.7; }
    to { transform: translateX(0); opacity: 1; }
  }
  
  @keyframes slide-out-right {
    from { transform: translateX(0); opacity: 1; }
    to { transform: translateX(100%); opacity: 0.7; }
  }
  
  @keyframes fade-out {
    from { opacity: 1; }
    to { opacity: 0; }
  }
  
  @keyframes zoom-in {
    from { transform: scale(0.95); opacity: 0; }
    to { transform: scale(1); opacity: 1; }
  }
  
  @keyframes zoom-out {
    from { transform: scale(1.05); opacity: 0; }
    to { transform: scale(1); opacity: 1; }
  }
</style>